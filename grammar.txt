program → (function | statement)*

function → 'def' IDENTIFIER '(' parameters ')' ':' block
parameters → (parameter (',' parameter)*)?
parameter → IDENTIFIER ('=' expression)?

block → NEWLINE INDENT statement+ DEDENT

statement → assignment_stmt
          | return_stmt
          | iterative_stmt
          | conditional_stmt
          | function_call_stmt
          | pass_stmt
          | break_stmt
          | continue_stmt
		  | import_stmt
          | raise_stmt
          | try_stmt
          | class_def

assignment_stmt → identifier_list ASSIGN_OP expression_list
identifier_list → IDENTIFIER (',' IDENTIFIER)*
expression_list → expression (',' expression)*

ASSIGN_OP → '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '//=' | '**='

return_stmt → 'return' expression?
pass_stmt → 'pass'
break_stmt → 'break'
continue_stmt → 'continue'

import_stmt → 'import' dotted_name ('as' IDENTIFIER)? (',' dotted_name ('as' IDENTIFIER)?)* 
            | 'from' dotted_name 'import' (IDENTIFIER ('as' IDENTIFIER)? | '*')

dotted_name → IDENTIFIER ('.' IDENTIFIER)*

raise_stmt → 'raise' expression

try_stmt → 'try' ':' block
           ('except' (IDENTIFIER ('as' IDENTIFIER)? )? ':' block)+
           ('else' ':' block)?
           ('finally' ':' block)?

class_def → 'class' IDENTIFIER ('(' IDENTIFIER ')')? ':' block

iterative_stmt → 'while' expression ':' block
               | 'for' IDENTIFIER 'in' expression ':' block

conditional_stmt → 'if' expression ':' block ('elif' expression ':' block)* ('else' ':' block)? | block 'if' expression 'else' block

function_call_stmt → IDENTIFIER '(' arguments ')' | dotted_name '(' arguments ')'

arguments → (expression (',' expression)*)?

expression → or_expr

or_expr → and_expr ('or' and_expr)*
and_expr → not_expr ('and' not_expr)*
not_expr → 'not' not_expr | comparison
comparison → arithmetic_expr (OP arithmetic_expr)*

OP → == | != | < | > | >= | <= 

arithmetic_expr → term (('+' | '-') term)*
term → factor (('*' | '/' | '%') factor)*

factor → INTEGER 
       | FLOAT 
       | IDENTIFIER 
       | STRING_LITERAL 
       | True 
       | False 
       | list_literal 
       | tuple_literal 
       | dict_literal 
       | '(' expression ')' 
       | IDENTIFIER '(' arguments ')'

list_literal → '[' (expression (',' expression)*)? ']'
tuple_literal → '(' (expression (',' expression)+) ')'
dict_literal → '{' (expression ':' expression (',' expression ':' expression)*)? '}'
